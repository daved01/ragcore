name: Release on Version Bump

on:
  push:
    branches:
      - main
      - chore/version # TODO: Remove

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get latest tag
        id: get_latest_tag
        run: |
            git fetch --tags
            latest_tag=$(git describe --tags --abbrev=0 --always origin/main)
            echo "::set-output name=tag::$latest_tag"

      - name: Get current version from tag
        id: get_current_version
        run: |
            current_version=$(echo ${{ steps.get_latest_tag.outputs.tag }} | sed 's/v//')
            echo "::set-output name=version::$current_version"

      - name: Check if version has increased
        id: check_version
        run: |
            current_version=$(echo ${{steps.get_current_version_from_tag.outputs.version}})
            new_version="$(python -c "from ragcore.version import __version__; print(__version__)")"

            if [[ "$current_version" == "$new_version" ]]; then
                echo "No version change detected. Skipping release."
                exit 0
            fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
            tag_name: v${{ steps.check_version.outputs.new_version }}
            release_name: Release ${{ steps.check_version.outputs.new_version }}
            # body: |
            #     Changes in this Release
            #     - First Change
            #     - Second Change
            draft: false
            prerelease: false

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      
    #   - name: Create new tag
    #     id: create_tag
    #     run: |
    #         git config user.name "GitHub Actions"
    #         git config user.email "github-actions@users.noreply.github.com"
    #         git tag -a v${{ steps.check_version.outputs.new_version }} -m "Version ${{ steps.check_version.outputs.new_version }}"
    #         git push origin v${{ steps.check_version.outputs.new_version }}
      


    #   - name: Create release
    #     env:
    #         TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
    #         TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

    #     run: |
    #         python -m build
    #         twine upload --repository testpypi dist/*
