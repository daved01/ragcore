# To create a release, push a new tag to main.
# The tag must match the version in ragcore/version.py.
# For example, if the new version in the code is 0.0.6,
# the tag must be v0.0.6 for the release to pass.

name: Release version

on:
  push:
    tags:
      - 'v*'
    branches:
      - fix/workflow

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_latest_tag
        run: |
            git fetch --tags
            latest_tag=$(git describe --tags --abbrev=0 --always origin/main)
            echo "::set-output name=tag::$latest_tag"

      - name: Get current version from new tag
        id: get_current_version
        run: |
            current_version=$(echo ${{ steps.get_latest_tag.outputs.tag }} | sed 's/v//')
            echo "::set-output name=version::$current_version"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt
      
      - name: Check if version matched tag
        id: check_version
        run: |
            current_version=$(echo ${{steps.get_current_version_from_tag.outputs.version}})
            new_version="$(python -c "from ragcore.version import __version__; print(__version__)")"

            if [[ "$current_version" == "$new_version" ]]; then
                echo "No version change detected. Skipping release."
                exit 0
            fi

      - name: Create release on PyPi
        env:
            TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
            TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
            python -m build
            twine upload dist/*
